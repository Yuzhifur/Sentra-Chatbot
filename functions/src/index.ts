/**
 * Import function triggers from their respective submodules:
 *
 * import {onCall} from "firebase-functions/v2/https";
 * import {onDocumentWritten} from "firebase-functions/v2/firestore";
 *
 * See a full list of supported triggers at https://firebase.google.com/docs/functions
 */

import * as functions from "firebase-functions";
import * as admin from "firebase-admin";

admin.initializeApp();

interface Message {
    role: string;
    content: string;
}

interface ChatHistory {
    messages: Message[];
}

interface ChatResult {
    success: boolean;
    aiMessage: Message;
}

export const processChat = functions.https.onCall(async (data): Promise<ChatResult> => {
    try {
        // Log the incoming data for debugging
        console.log("Received data in cloud function:", data);
        
        // Validate input data
        if (!data || typeof data !== 'object') {
            console.error("Invalid data format:", data);
            throw new functions.https.HttpsError(
                "invalid-argument",
                "Invalid request data format"
            );
        }

        // Check for messages array
        if (!('messages' in data)) {
            console.error("No messages field in data:", data);
            throw new functions.https.HttpsError(
                "invalid-argument",
                "No messages in request data"
            );
        }

        if (!Array.isArray(data.messages)) {
            console.error("Messages is not an array:", data.messages);
            throw new functions.https.HttpsError(
                "invalid-argument",
                "Messages must be an array"
            );
        }

        if (data.messages.length === 0) {
            console.error("Empty messages array");
            throw new functions.https.HttpsError(
                "invalid-argument",
                "Messages array is empty"
            );
        }

        // Check for session ID
        if (!('sessionId' in data)) {
            console.error("No sessionId in data:", data);
            throw new functions.https.HttpsError(
                "invalid-argument",
                "Missing sessionId"
            );
        }

        if (typeof data.sessionId !== 'string') {
            console.error("sessionId is not a string:", data.sessionId);
            throw new functions.https.HttpsError(
                "invalid-argument",
                "sessionId must be a string"
            );
        }

        // Check for character ID
        if (!('characterId' in data)) {
            console.error("No characterId in data:", data);
            throw new functions.https.HttpsError(
                "invalid-argument",
                "Missing characterId"
            );
        }

        if (typeof data.characterId !== 'string') {
            console.error("characterId is not a string:", data.characterId);
            throw new functions.https.HttpsError(
                "invalid-argument",
                "characterId must be a string"
            );
        }

        // Extract data
        const sessionId = data.sessionId;
        const characterId = data.characterId;

        // Get character information from Firestore
        const db = admin.firestore();
        const characterDoc = await db.collection("characters").doc(characterId).get();
        
        if (!characterDoc.exists) {
            throw new functions.https.HttpsError(
                "not-found",
                "Character not found"
            );
        }

        const characterData = characterDoc.data();
        
        if (!characterData) {
            throw new functions.https.HttpsError(
                "internal",
                "Character data is empty"
            );
        }

        // Get the chat document
        const chatDoc = await db.collection("chats").doc(sessionId).get();
        
        if (!chatDoc.exists) {
            throw new functions.https.HttpsError(
                "not-found",
                "Chat session not found"
            );
        }

        // Create a placeholder AI response
        // In a real implementation, this would be replaced by a call to Claude API
        const aiResponse: Message = {
            role: "assistant",
            content: `This is a placeholder response from ${characterData.name}. In a real implementation, this would be a response generated by Claude API based on my character profile: ${characterData.characterDescription}`
        };

        // Return AI response to client
        return {
            success: true,
            aiMessage: aiResponse
        };

    } catch (error) {
        console.error("Error processing chat request:", error);

        // Return error to client
        throw new functions.https.HttpsError(
            "internal",
            error instanceof Error ? error.message : "Error processing chat request"
        );
    }
});

// Cloud function to create a new chat session
export const createChatSession = functions.https.onCall(async (data): Promise<{ success: boolean; sessionId: string }> => {
    try {
        // Validate input data
        if (!data || typeof data !== 'object') {
            throw new functions.https.HttpsError(
                "invalid-argument",
                "Invalid request data format"
            );
        }

        if (!('characterId' in data) || typeof data.characterId !== 'string') {
            throw new functions.https.HttpsError(
                "invalid-argument",
                "Missing or invalid characterId"
            );
        }

        if (!('userId' in data) || typeof data.userId !== 'string') {
            throw new functions.https.HttpsError(
                "invalid-argument",
                "Missing or invalid userId"
            );
        }

        // Extract data
        const characterId = data.characterId;
        const userId = data.userId;

        // Get character information
        const db = admin.firestore();
        const characterDoc = await db.collection("characters").doc(characterId).get();
        
        if (!characterDoc.exists) {
            throw new functions.https.HttpsError(
                "not-found",
                "Character not found"
            );
        }

        const characterData = characterDoc.data();
        
        if (!characterData) {
            throw new functions.https.HttpsError(
                "internal",
                "Character data is empty"
            );
        }

        // Get user information
        const userDoc = await db.collection("users").doc(userId).get();
        
        if (!userDoc.exists) {
            throw new functions.https.HttpsError(
                "not-found",
                "User not found"
            );
        }

        const userData = userDoc.data();
        
        if (!userData) {
            throw new functions.https.HttpsError(
                "internal",
                "User data is empty"
            );
        }

        // Create a new chat session
        const chatRef = db.collection("chats").doc();
        
        // Initialize with empty message history
        const emptyHistory: ChatHistory = { messages: [] };
        
        await chatRef.set({
            characterId: characterId,
            characterName: characterData.name,
            userId: userId,
            userName: userData.displayName || userData.username || "User",
            history: JSON.stringify(emptyHistory),
            createdAt: admin.firestore.FieldValue.serverTimestamp(),
            updatedAt: admin.firestore.FieldValue.serverTimestamp()
        });

        // Return the new session ID
        return {
            success: true,
            sessionId: chatRef.id
        };

    } catch (error) {
        console.error("Error creating chat session:", error);

        // Return error to client
        throw new functions.https.HttpsError(
            "internal",
            error instanceof Error ? error.message : "Error creating chat session"
        );
    }
});